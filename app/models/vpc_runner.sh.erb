#!/bin/bash
# Script to run Openstack VPC jobs

NOVA_URL=$1
NOVA_BRANCH=$2
NOVA_MERGE_TRUNK=$3
NOVA_REVISION=$4
NOVA_PACKAGER_URL=$5

KEYSTONE_URL=$6
KEYSTONE_BRANCH=$7
KEYSTONE_MERGE_TRUNK=$8
KEYSTONE_REVISION=$9
KEYSTONE_PACKAGER_URL=${10}

GLANCE_URL=${11}
GLANCE_BRANCH=${12}
GLANCE_MERGE_TRUNK=${13}
GLANCE_REVISION=${14}
GLANCE_PACKAGER_URL=${15}

CHEF_INSTALLER_CONF=${16}
NODES_JSON_CONF=${17}
SERVER_GROUP_JSON_CONF=${18}

<% job.job_group.smoke_test.test_suites.each do |suite| %>
RUN_<%= suite.name %>=true
<% end %>

TMP_DIR=$(mktemp -d)

# Log to the job log and stdout
function fail {
	local MSG=$1
	echo "FAILURE_MSG=$MSG"
	exit 1
}

function get_nova_source_bzr {

	bzr branch "$NOVA_URL" nova_source || \
		fail "Failed to checkout bzr branch."
	if [ -n "$NOVA_REVISION" ]; then
		cd nova_source
		bzr revert --revision="$NOVA_REVISION" || \
			fail "Failed to revert to revision $NOVA_REVISION."
		bzr commit -m "Revert to revision $NOVA_REVISION." || \
			fail "Failed to commit revert to revision $NOVA_REVISION."
		cd -
	else
	    NOVA_REVISION=$(bzr version-info nova_source | grep revno | sed -e "s|revno: ||")
		[ -z "$NOVA_REVISION" ] && fail "Failed to obtain nova revision from bzr."
	fi
	echo "NOVA_REVISION=$NOVA_REVISION"

	if [[ "$NOVA_MERGE_TRUNK" == "true" ]]; then
		cd nova_source || fail "Failed to cd into nova_source directory."
		bzr merge lp:nova || fail "Failed to merge lp:nova."
		cd $TMP_DIR
	fi

}

function get_nova_source_git {

	git clone $NOVA_GIT_MASTER nova_source || \
		fail "Failed to git clone nova."
	cd nova_source
	git fetch $NOVA_URL $NOVA_BRANCH || \
		fail "Failed to git fetch branch $NOVA_BRANCH."
	git checkout -q FETCH_HEAD || fail "Failed to git checkout FETCH_HEAD."

	if [ -n "$NOVA_REVISION" ]; then
		git checkout $NOVA_REVISION || \
			fail "Failed to revert to revision $NOVA_REVISION."
	else
		NOVA_REVISION=$(git rev-parse --short HEAD)
		[ -z "$NOVA_REVISION" ] && \
			fail "Failed to obtain nova revision from git."
	fi
	echo "NOVA_REVISION=$NOVA_REVISION"

	if [[ "$NOVA_MERGE_TRUNK" == "true" ]]; then
		git merge master || fail "Failed to merge master."
	fi

	cd $TMP_DIR
}

function get_keystone_source_bzr {
   #NOTE: Does anyone uses bzr for Keystone development?
	bzr branch "$KEYSTONE_URL" keystone_source || \
		fail "Failed to checkout bzr branch."
	if [ -n "$KEYSTONE_REVISION" ]; then
		cd keystone_source
		bzr revert --revision="$KEYSTONE_REVISION" || \
			fail "Failed to revert to revision $KEYSTONE_REVISION."
		bzr commit -m "Revert to revision $KEYSTONE_REVISION." || \
			fail "Failed to commit revert to revision $KEYSTONE_REVISION."
		cd -
	else
		KEYSTONE_REVISION=$(bzr version-info keystone_source | grep revno | sed -e "s|revno: ||")
		[ -z "$KEYSTONE_REVISION" ] && fail "Failed to obtain keystone revision from bzr."
	fi
	echo "KEYSTONE_REVISION=$KEYSTONE_REVISION"

	if [[ "$KEYSTONE_MERGE_TRUNK" == "true" ]]; then
		cd keystone_source || fail "Failed to cd into keystone_source directory."
        #NOTE: this may fail (I'm not sure there is an lp:keystone)
		bzr merge lp:keystone || fail "Failed to merge lp:keystone."
		cd $TMP_DIR
	fi

}

function get_keystone_source_git {

	git clone $KEYSTONE_GIT_MASTER keystone_source || \
		fail "Failed to git clone keystone."
	cd keystone_source
	git fetch $KEYSTONE_URL $KEYSTONE_BRANCH || \
		fail "Failed to git fetch branch $KEYSTONE_BRANCH."
	git checkout -q FETCH_HEAD || fail "Failed to git checkout FETCH_HEAD."

	if [ -n "$KEYSTONE_REVISION" ]; then
		git checkout $KEYSTONE_REVISION || \
			fail "Failed to revert to revision $KEYSTONE_REVISION."
	else
		KEYSTONE_REVISION=$(git rev-parse --short HEAD)
		[ -z "$KEYSTONE_REVISION" ] && \
			fail "Failed to obtain keystone revision from git."
	fi
	echo "KEYSTONE_REVISION=$KEYSTONE_REVISION"

	if [[ "$KEYSTONE_MERGE_TRUNK" == "true" ]]; then
		git merge master || fail "Failed to merge master."
	fi

	cd $TMP_DIR
}

function get_glance_source_bzr {

	bzr branch "$GLANCE_URL" glance_source || \
		fail "Failed to checkout bzr branch."
	if [ -n "$GLANCE_REVISION" ]; then
		cd glance_source
		bzr revert --revision="$GLANCE_REVISION" || \
			fail "Failed to revert to revision $GLANCE_REVISION."
		bzr commit -m "Revert to revision $GLANCE_REVISION." || \
			fail "Failed to commit revert to revision $GLANCE_REVISION."
		cd -
	else
		GLANCE_REVISION=$(bzr version-info glance_source | grep revno | sed -e "s|revno: ||")
		[ -z "$GLANCE_REVISION" ] && fail "Failed to obtain glance revision from bzr."
	fi
	echo "GLANCE_REVISION=$GLANCE_REVISION"

	if [[ "$GLANCE_MERGE_TRUNK" == "true" ]]; then
		cd glance_source || fail "Failed to cd into glance_source directory."
		bzr merge lp:glance || fail "Failed to merge lp:glance."
		cd $TMP_DIR
	fi

}

function get_glance_source_git {

	git clone $GLANCE_GIT_MASTER glance_source || \
		fail "Failed to git clone glance."
	cd glance_source
	git fetch $GLANCE_URL $GLANCE_BRANCH || \
		fail "Failed to git fetch branch $GLANCE_BRANCH."
	git checkout -q FETCH_HEAD || fail "Failed to git checkout FETCH_HEAD."

	if [ -n "$GLANCE_REVISION" ]; then
		git checkout $GLANCE_REVISION || \
			fail "Failed to revert to revision $GLANCE_REVISION."
	else
		GLANCE_REVISION=$(git rev-parse --short HEAD)
		[ -z "$GLANCE_REVISION" ] && \
			fail "Failed to obtain glance revision from git."
	fi
	echo "GLANCE_REVISION=$GLANCE_REVISION"

	if [[ "$GLANCE_MERGE_TRUNK" == "true" ]]; then
		git merge master || fail "Failed to merge master."
	fi

	cd $TMP_DIR
}

function delete_group {
	XEN_DISCONNECT=$1

	#for debugging purposes you can touch this file to hang the group
	rake ssh bash <<-EOF_BASH
	until [ ! -f /tmp/do_not_delete ]; do
		sleep 1
	done
	EOF_BASH

	[ -n "$XEN_DISCONNECT" ] && rake xen:disconnect
	rake group:delete
}

function setup {

	chef-vpc-toolkit -v || \
		fail "Please install the Chef VPC Toolkit."

	cd $TMP_DIR
	if [ -n "$NOVA_URL" ]; then
		if [[ ${NOVA_URL:0:2} == "lp" ]]; then
			get_nova_source_bzr
		else	
			get_nova_source_git
		fi
	fi

	if [ -n "$KEYSTONE_URL" ]; then
		if [[ ${KEYSTONE_URL:0:2} == "lp" ]]; then
			get_keystone_source_bzr
		else	
			get_keystone_source_git
		fi
	fi

	if [ -n "$GLANCE_URL" ]; then
		if [[ ${GLANCE_URL:0:2} == "lp" ]]; then
			get_glance_source_bzr
		else	
			get_glance_source_git
		fi
	fi

	git clone <%= ENV['OPENSTACK_VPC_URL'] %> openstack_vpc && \
		cd openstack_vpc || \
		fail "Failed to checkout openstack VPC."

	cp "$CHEF_INSTALLER_CONF" config/chef_installer.yml || \
		fail "Failed to copy chef_installer.yml"

	cp "$NODES_JSON_CONF" config/nodes.json || \
		fail "Failed to copy nodes.json"

	cp "$SERVER_GROUP_JSON_CONF" config/server_group.json || \
		fail "Failed to copy server_group.json"

	rake chef:validate_json || fail "Invalid JSON config file(s).";

}

function run_job {

trap "{ delete_group; cd /tmp; rm -Rf $TMP_DIR; }" INT TERM EXIT
if rake group:create && rake group:poll; then

	rake nova:build_packages SOURCE_DIR="$TMP_DIR/nova_source" \
		DEB_PACKAGER_URL="$NOVA_PACKAGER_URL" || \
		fail "Failed to build nova packages."

	rake keystone:build_packages SOURCE_DIR="$TMP_DIR/keystone_source" \
		DEB_PACKAGER_URL="$KEYSTONE_PACKAGER_URL" || \
		fail "Failed to build keystone packages."

	rake glance:build_packages SOURCE_DIR="$TMP_DIR/glance_source" \
		DEB_PACKAGER_URL="$GLANCE_PACKAGER_URL" || \
		fail "Failed to build glance packages."

	# install Chef and the Chef Cookbooks
	rake chef:push_repos && rake chef:install || \
		{ rake chef:tail_logs; fail "Failed to install Chef server."; }

	# poll for Chef clients to finish runnings
	rake chef:poll_clients CHEF_TIMEOUT=600 || \
		{ rake chef:tail_logs; fail "Chef client timeout."; }

	# run OS API v1.0 tests (Uses the Ruby openstack-compute gem)
	if [ -n "$RUN_RUBY_OSAPI_V10" ]; then
	rake nova:ruby_osapi_tests SERVER_NAME=nova1 || \
		{ rake nova:tail_logs SERVER_NAME=nova1; fail "OS API tests failed."; }
	fi

	# run OS API v1.1 tests (Uses the Ruby openstack-compute gem)
	if [ -n "$RUN_RUBY_OSAPI_V11" ]; then
	rake nova:ruby_osapi_v11_tests SERVER_NAME=nova1 || \
		{ rake nova:tail_logs SERVER_NAME=nova1; fail "OS API tests failed."; }
	fi

	# run smoke tests
	if [ -n "$RUN_NOVA_SMOKE_TESTS" ]; then
	rake nova:smoke_tests SERVER_NAME=nova1 || \
		{ rake nova:tail_logs SERVER_NAME=nova1; fail "Smoke tests failed."; }
	fi

	# run stacktester
	if [ -n "$RUN_STACK_TESTER" ]; then
	rake nova:stacktester SERVER_NAME=nova1 || \
		{ rake nova:tail_logs SERVER_NAME=nova1; fail "Stacktester failed."; }
	fi

else
	rake chef:tail_logs
	fail "Failed to create server group."
fi

}

function run_xen_hybrid_job {

[ -n "$SERVER_IP_LIST" ] || fail "Xen jobs require a SERVER_IP_LIST env variable."

trap "{ delete_group 'xen_discon'; cd /tmp; rm -Rf $TMP_DIR; }" INT TERM EXIT
if rake group:create && rake group:poll; then

	rake nova:build_packages SOURCE_DIR="$TMP_DIR/nova_source" \
		DEB_PACKAGER_URL="$NOVA_PACKAGER_URL" || \
		fail "Failed to build nova packages."

	rake nova:build_rpms SOURCE_DIR="$TMP_DIR/nova_source" || \
		fail "Failed to build Xen plugin RPMs."

	rake keystone:build_packages SOURCE_DIR="$TMP_DIR/keystone_source" \
		DEB_PACKAGER_URL="$KEYSTONE_PACKAGER_URL" || \
		fail "Failed to build keystone packages."

	rake glance:build_packages SOURCE_DIR="$TMP_DIR/glance_source" \
		DEB_PACKAGER_URL="$GLANCE_PACKAGER_URL" || \
		fail "Failed to build glance packages."

	# install Chef and the Chef Cookbooks
	rake chef:push_repos && rake chef:install || \
		{ rake chef:tail_logs; fail "Failed to install Chef server."; }

	# Bootstrap all the Xen Servers
	local COUNT=0
	for SERVER_IP in $SERVER_IP_LIST; do
		COUNT=$(($COUNT + 1))
		local SERVER_NAME="xen$COUNT"
		rake xen:bootstrap XENSERVER_IP=$SERVER_IP SERVER_NAME=$SERVER_NAME || \
			fail "Failed to connect Xen Server: $SERVER_NAME to VPN group."
		sleep 10
		rake chef:install SERVER_NAME=$SERVER_NAME || \
			fail "Failed to install Chef on $SERVER_NAME."
	done

	#FIXME: this can come out when compute1.vpc gets a proper domain name
	rake chef:poll_clients SERVER_NAME=nova1 || \
		{ rake chef:tail_logs SERVER_NAME=nova1; fail "Chef client timeout: nova1"; }

	# Poll Xen Servers to finish Chef'ing
	COUNT=0
	for SERVER_IP in $SERVER_IP_LIST; do
		COUNT=$(($COUNT + 1))
		local SERVER_NAME="xen$COUNT"
		local COMPUTE_NAME="compute$COUNT"
		rake chef:poll_clients SERVER_NAME=$SERVER_NAME || \
			{ rake chef:tail_logs SERVER_NAME=$SERVER_NAME; fail "Chef client timeout: $SERVER_NAME"; }
		rake ssh bash <<-EOF_BASH
		if ! grep -c "$COMPUTE_NAME.vpc" /etc/hosts &> /dev/null; then
		echo "172.19.0.10$COUNT     $COMPUTE_NAME.vpc $COMPUTE_NAME" >> /etc/hosts
		fi
		EOF_BASH
		rake chef:install SERVER_NAME=$COMPUTE_NAME || \
			fail "Failed to install Chef on $COMPUTE_NAME."
	done

	# Poll Compute nodes (dom0) to finish Chef'ing
	COUNT=0
	for SERVER_IP in $SERVER_IP_LIST; do
		COUNT=$(($COUNT + 1))
		# NOTE: we put .vpc on these because the agent doesn't seem to
		# set the domain name correctly
		local COMPUTE_NAME="compute$COUNT.vpc"
		rake chef:poll_clients SERVER_NAME=$COMPUTE_NAME || \
			{ rake chef:tail_logs SERVER_NAME=$COMPUTE_NAME; fail "Chef client timeout: $COMPUTE_NAME"; }
	done

	# run OS API v1.0 tests (Uses the Ruby openstack-compute gem)
	if [ -n "$RUN_RUBY_OSAPI_V10" ]; then
	rake nova:ruby_osapi_tests SERVER_NAME=nova1 MODE=xen || \
		{ rake nova:tail_logs SERVER_NAME=nova1; fail "OS API tests failed."; }
	fi

	# run OS API v1.1 tests (Uses the Ruby openstack-compute gem)
	if [ -n "$RUN_RUBY_OSAPI_V11" ]; then
	rake nova:ruby_osapi_v11_tests SERVER_NAME=nova1 MODE=xen || \
		{ rake nova:tail_logs SERVER_NAME=nova1; fail "OS API tests failed."; }
	fi

	# run stacktester
	if [ -n "$RUN_STACK_TESTER" ]; then
	rake nova:stacktester SERVER_NAME=nova1 || \
		{ rake nova:tail_logs SERVER_NAME=nova1; fail "Stacktester failed."; }
	fi

else
	rake chef:tail_logs
	fail "Failed to create server group."
fi

}

setup
<% if job.type == "JobXenHybrid" %>
run_xen_hybrid_job
<% else %>
run_job
<% end %>
